# ADJUST SETUP
knitr::opts_chunk$set(echo = TRUE)
# Clear memory
rm(list=ls())
# Import libraries
library(tidyverse)
library(readr)
library(dplyr)
# load data
data("diabetes", package = "lars")
y <- diabetes$y
X <- as.data.frame(diabetes$x)
View(X)
diabetes <- cbind(diabetes$y,diabetes$x)
View(diabetes)
diabetes <- as.data.frame(cbind(diabetes$y,diabetes$x))
# load data
data("diabetes", package = "lars")
diabetes <- as.data.frame(cbind(diabetes$y,diabetes$x))
View(diabetes)
colnames(diabetes)[,1] <- "y"
colnames(diabetes)[,1] <- "y"
colnames(diabetes)[1] <- "y"
summary(diabetes)
head(diabetes)
head(diabetes)
summary(diabetes)
# load data
data("diabetes", package = "lars")
diabetes <- as.data.frame(cbind(diabetes$y,diabetes$x))
colnames(diabetes)[1] <- "y"
summary(diabetes)
# load data
data("diabetes", package = "lars")
diabetes <- as.data.frame(cbind(diabetes$y,diabetes$x))
colnames(diabetes)[1] <- "y"
summary(diabetes)
# load data
data("diabetes", package = "lars")
diabetes <- as.data.frame(cbind(diabetes$y,diabetes$x))
colnames(diabetes)[1] <- "y"
summary(diabetes)
# load data
data("diabetes", package = "lars")
diabetes <- as.data.frame(cbind(diabetes$y,diabetes$x))
colnames(diabetes)[1] <- "y"
summary(diabetes)
set.seed(12345)
set.seed(12345)
# generate & separate train and test data
diabetes_rand <- diabetes[sample(nrow(diabetes)), ]
train <- diabetes_rand[1:400, ]
test <- diabetes_rand[401:nrow(diabetes), ]
correlation_matrix <- cor(diabetes, use = "complete.obs")
View(correlation_matrix)
print(correlation_matrix <- cor(diabetes, use = "complete.obs"))
pairs(diabetes)
corrplot::corrplot(diabetes)
set.seed(12345)
# generate & separate train and test data
diabetes_rand <- diabetes[sample(nrow(diabetes)), ]
train <- diabetes_rand[1:400, ]
test <- diabetes_rand[401:nrow(diabetes), ]
cormatrix <- cor(diabetes, use = "complete.obs")
print(cormatrix)
pairs(diabetes)
corrplot::corrplot(diabetes)
print(cormatrix)
as.table(cormatrix)
library(knitr)
#print(cormatrix)
kable(cormatrix, caption = "Correlation Matrix")
install.packages("gt")
library(gt)
install.packages("gt")
library(gt)
# ADJUST SETUP
knitr::opts_chunk$set(echo = TRUE)
# modify!
#knitr::opts_knit$set(root.dir = 'C:/Users/avalder/OneDrive - WU Wien/Documents/Study/SoSe_24/Statistical Learning/assignments/StatL_5454/A1')
data("Wage", package = "ISLR2")
force(Wage)
View(Wage)
clas(Wage)
class(Wage)
Wage <- Wage$[-"logwage"]
Wage <- Wage[-"logwage"]
Wage <- Wage[,-10]
summary(Wage)
data("Wage", package = "ISLR2")
summary(Wage)
# exclude log wage
Wage = df.drop('logwage', axis=1)  # Step 1: Remove logwage
# exclude log wage
Wage <- Wage[ , !(names(Wage) %in% c('logwage'))] # Remove logwage
Wage <- Wage %>%
mutate_("age_sq" = age^2,
"education" = as.factor(education))
# Import libraries
library(tidyverse)
# Import libraries
library(tidyverse)
library(readr)
library(dplyr)
library(knitr)
library(leaps)
library(reshape2)
library(plyr)
library(Hmisc)
data("Wage", package = "ISLR2")
summary(Wage)
# exclude log wage
Wage <- Wage[ , !(names(Wage) %in% c('logwage'))] # Remove logwage
Wage <- Wage %>%
mutate_("age_sq" = age^2,
"education" = as.factor(education))
Wage <- Wage %>%
mutate("age_sq" = age^2,
"education" = as.factor(education))
View(Wage)
lm_wage <- lm(wage ~ ., data = train[,!(names(Wage) %in% c('age','wage'))])
lm_wage <- lm(wage ~ ., data = Wage[,!(names(Wage) %in% c('age','wage'))])
lm_wage <- lm(wage ~ ., data = Wage[,!(names(Wage) %in% c('age','year'))])
View(Wage)
summary(as.factor(Wage))
summary(as.factor(Wage$education))
data("Wage", package = "ISLR2")
summary(Wage)
# exclude log wage
Wage <- Wage[ , !(names(Wage) %in% c('logwage'))]
summary(as.factor(Wage$education))
Wage <- Wage %>%
mutate("age_sq" = age^2,
"education" = factor(Wage$education, ordered = TRUE))
contrasts(Wage$education) <- contr.poly(levels(Wage$education))
lm_wage <- lm(Wage ~ age + age2 + education, data = Wage)
lm_wage <- lm(Wage ~ age + age_sq + education, data = Wage)
lm_wage <- lm(wage ~ age + age_sq + education, data = Wage)
summary(lm_wage)
View(Wage)
lm_wage <- lm(wage ~ ., data = Wage[,!(names(Wage) %in% c('age','year'))])
data$education <- factor(data$education, levels = c("High School", "Bachelor", "Master", "PhD"), ordered = TRUE)
contrasts(Wage$education) <- contr.poly(levels(Wage$education)) # polynominal coding bc.we have ordinal variables, where the levels have a natural order
data("Wage", package = "ISLR2")
summary(Wage)
# exclude log wage
Wage <- Wage[ , !(names(Wage) %in% c('logwage'))]
data$education <- factor(data$education, levels = c("High School", "Bachelor", "Master", "PhD"), ordered = TRUE)
Wage$education <- factor(data$education, levels = c("High School", "Bachelor", "Master", "PhD"), ordered = TRUE)
summary(as.factor(Wage$education))
Wage <- Wage %>%
mutate("age_sq" = age^2,
"education" = factor(Wage$education, ordered = TRUE))
lm_wage <- lm(wage ~ age + age_sq + education, data = Wage)
summary(lm_wage)
contrasts(Wage$education) <- contr.poly(levels(Wage$education)) # polynominal coding bc.we have ordinal variables, where the levels have a natural order
lm_wage <- lm(wage ~ age + age_sq + education, data = Wage)
summary(lm_wage)
# or all X's variables?
#lm_wage <- lm(wage ~ ., data = Wage[,!(names(Wage) %in% c('age','year'))])
kable(summary(lm_wage))
lm_wage_sum <- summary(lm_wage)
kable(lm_wage_sum, caption = "Regression Summary", digits = 3)
library(broom)
library(kableExtra)
model_summary <- tidy(lm_wage)
kable(lm_wage_sum, "latex", booktabs = T, digits = 3) %>%
kable_styling(latex_options = c("striped", "scale_down")) %>%
add_header_above(c(" " = 2, "Regression Summary" = 3))
View(model_summary)
model_summary <- broom::tidy(lm_wage)
kable(lm_wage_sum, "latex", booktabs = T, digits = 3) %>%
kable_styling(latex_options = c("striped", "scale_down")) %>%
add_header_above(c(" " = 2, "Regression Summary" = 3))
kable(model_summary, "latex", booktabs = T, digits = 3) %>%
kable_styling(latex_options = c("striped", "scale_down")) %>%
add_header_above(c(" " = 2, "Regression Summary" = 3))
lm_wage_sum <- broom::tidy(lm_wage_sum)
View(lm_wage_sum)
kable(lm_wage_sum, "latex", booktabs = T, digits = 3) %>%
kable_styling(latex_options = c("striped", "scale_down")) %>%
add_header_above(c(" " = 2, "Regression Summary" = 3))
stargazer(lm_wage, type = "latex", title = "Regression Summary", header = FALSE)
stargazer(lm_wage_sum, type = "latex", title = "Regression Summary", header = FALSE)
#Use best subset selection to determine a suitable model.
library(stargazer)
stargazer(lm_wage_sum, type = "latex", title = "Regression Summary", header = FALSE)
lm_wage_all <- lm(wage ~ . + age_sq, data = Wage)
lm_wage_sub <-  leaps::regsubsets(wage ~ age + age2 + education, data = Wage,
nvmax = 9, really.big = TRUE)
lm_wage_sub <-  leaps::regsubsets(wage ~ age + age_sq + education, data = Wage,
nvmax = 9, really.big = TRUE)
lm_wage_sub_sum <- summary(lm_wage_sub)##
lm_wage_sub_sum
plot(summary(lm_wage_sub)$rss, xlab = "Subset size", ylab = "RSS", type = "b")
# Find the model with the lowest AIC
data.frame(
Adj.R2 = which.max(lm_wage_sub_sum$adjr2),
BIC = which.min(lm_wage_sub_sum$cp),
AIC = which.min(lm_wage_sub_sum$bic)
)
#choose based on AIC
lm_wage_sub_aic <- lm(select_model(4,lm_subset,"Y"), train)
#choose based on AIC
lm_wage_sub_aic <- lm(select_model(4,lm_wage_sub,"wage"), train)
#help function
select_model <- function(id, object, outcome){
models <- summary(object)$which[id,-1]
formula <- as.formula(object$call[[2]])
outcome <- all.vars(formula)[1]
predictors <- names(which(models == TRUE))
predictors <- paste(predictors, collapse = "+")
as.formula(paste0(outcome, "~", predictors))
}
#choose based on AIC
lm_wage_sub_aic <- lm(select_model(4,lm_wage_sub,"wage"), train)
#choose based on AIC
lm_wage_sub_aic <- lm(select_model(4,lm_wage_sub,"wage"), Wage)
#Use best subset selection to determine a suitable model.
# best subset selection model
lm_wage_sub <-  leaps::regsubsets(wage ~ age + age_sq + education, data = Wage,
nvmax = 9, really.big = TRUE)
lm_wage_sub_sum <- summary(lm_wage_sub)##
lm_wage_sub_sum
plot(summary(lm_wage_sub)$rss, xlab = "Subset size", ylab = "RSS", type = "b")
# Find the model with the lowest AIC
data.frame(
Adj.R2 = which.max(lm_wage_sub_sum$adjr2),
BIC = which.min(lm_wage_sub_sum$cp),
AIC = which.min(lm_wage_sub_sum$bic)
)
#choose based on AIC
lm_wage_sub_aic <- lm(select_model(4,lm_wage_sub,"wage"), Wage)
#choose based on AIC
lm_wage_sub_aic <- lm(select_model(4,lm_wage_sub,"wage"), Wage)
# Direct polynomial terms
lm_wage_sub_direct <- lm(Wage ~ age + I(age_sq) + education, data = Wage)
# Direct polynomial terms
lm_wage_sub_direct <- lm(wage ~ age + I(age_sq) + education, data = Wage)
summary(model_direct_poly)
summary(lm_wage_sub_direct)
summary(lm_wage_sub_ortho)
# Orthogonal polynomials
lm_wage_sub_ortho <- lm(Wage ~ poly(age, 2) + education, data = Wage)
# Orthogonal polynomials
lm_wage_sub_ortho <- lm(wage ~ poly(age, 2) + education, data = Wage)
summary(lm_wage_sub_ortho)
# Direct polynomial terms
lm_wage_sub_direct <- lm(wage ~ age + I(age_sq) + education, data = Wage)
summary(lm_wage_sub_direct)
# Orthogonal polynomials
lm_wage_sub_ortho <- lm(wage ~ poly(age, 2) + education, data = Wage)
summary(lm_wage_sub_ortho)
# comparison
# AIC and BIC for the direct polynomial model
aic_direct_poly <- AIC(model_direct_poly)
# comparison
# AIC and BIC for the direct polynomial model
aic_direct_poly <- AIC(lm_wage_sub_direct)
bic_direct_poly <- BIC(lm_wage_sub_direct)
# Calculate AIC and BIC for the orthogonal polynomials model
aic_ortho_poly <- AIC(lm_wage_sub_ortho)
bic_ortho_poly <- BIC(lm_wage_sub_ortho)
aic_direct_poly
bic_direct_poly
aic_ortho_poly
bic_ortho_poly
data("Wage", package = "ISLR2")
summary(Wage)
# exclude log wage
Wage <- Wage[ , !(names(Wage) %in% c('logwage'))]
# For the 'education' variable, we'll need to set up contrasts.
summary(as.factor(Wage$education))
Wage <- Wage %>%
mutate("age_sq" = age^2, #specify non-linear effects for the variable age: if more than squares use splines..
"education" = factor(Wage$education, ordered = TRUE))
contrasts(Wage$education) <- contr.poly(levels(Wage$education)) # polynominal coding bc.we have ordinal variables, where the levels have a natural order
lm_wage <- lm(wage ~ age + age_sq + education, data = Wage)
lm_wage_sum <- summary(lm_wage)
# make output nice
library(broom)
library(kableExtra)
lm_wage_sum <- broom::tidy(lm_wage_sum)
kable(lm_wage_sum, "latex", booktabs = T, digits = 3) %>%
kable_styling(latex_options = c("striped", "scale_down")) %>%
add_header_above(c(" " = 2, "Regression Summary" = 3))
#Use best subset selection to determine a suitable model.
# best subset selection model
lm_wage_sub <-  leaps::regsubsets(wage ~ age + age_sq + education, data = Wage,
nvmax = 9, really.big = TRUE)
lm_wage_sub_sum <- summary(lm_wage_sub)##
lm_wage_sub_sum
plot(summary(lm_wage_sub)$rss, xlab = "Subset size", ylab = "RSS", type = "b")
# Find the model with the lowest AIC
data.frame(
Adj.R2 = which.max(lm_wage_sub_sum$adjr2),
BIC = which.min(lm_wage_sub_sum$cp),
AIC = which.min(lm_wage_sub_sum$bic) # best is model 4
)
#choose based on AIC
#Error in eval(predvars, data, env) : object 'education.L' not found
lm_wage_sub_aic <- lm(select_model(4,lm_wage_sub,"wage"), Wage)
install.packages("tlm")
